#client

#include<stdio.h>
#include<stdlib.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<string.h>
int main(int argc, char **argv)
{
int sockfd,n,len;
char buff[1024];
struct sockaddr_in servaddr;

        if(argc!=2)
                printf("\nToo few arguments.");
        if((sockfd=socket(AF_INET,SOCK_STREAM,0))<0)
                printf("\nsocket error");

servaddr.sin_family=AF_INET;
servaddr.sin_port=htons(1400);
inet_pton(AF_INET,argv[1],&servaddr.sin_addr);

if((connect(sockfd,(struct sockaddr*) &servaddr,sizeof(servaddr)))==-1)
                printf("\nconnect error");

        read(sockfd,buff,sizeof(buff));
        write(1,buff,strlen(buff));
return 0;
}

#server

#include<time.h>
#include<stdio.h>
#include<stdlib.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<string.h>
int main()
{
time_t ticks;
char buff[1024];
int sockfd,connfd,fd,n,id;
struct sockaddr_in servaddr;

sockfd=socket(AF_INET,SOCK_STREAM,0);
        if(sockfd<0)   printf("\nSocket Error!");

servaddr.sin_family=AF_INET;
servaddr.sin_port=htons(1400);
servaddr.sin_addr.s_addr=htonl(INADDR_ANY);

        if((bind(sockfd,(struct sockaddr*) &servaddr,sizeof(servaddr)))==-1)
         printf("\nBind Error!");

        listen(sockfd,5);

        if((connfd=accept(sockfd,(struct sockaddr*)NULL,NULL))==-1);
printf("\n Accept Error!");

        ticks=time(NULL);

        snprintf(buff,sizeof(buff),"%s\n",ctime(&ticks));
        write(connfd,buff,strlen(buff));
        close(connfd);
return 0;

}
